{"majorversion": 2, "filemap": {"MatchField.js": {"classlist": ["validator.MatchField"], "name": "MatchField.js", "module": "validator"}, "BaseInputField.js": {"classlist": ["validator.BaseInputField"], "name": "BaseInputField.js", "module": "validator"}, "Button.js": {"classlist": ["validator.Button"], "name": "Button.js", "module": "validator"}, "Validator.js": {"classlist": ["validator.GLOBAL", "validator.Validator"], "name": "Validator.js", "module": "validator"}, "CheckboxField.js": {"classlist": ["validator.CheckboxField"], "name": "CheckboxField.js", "module": "validator"}, "GroupBaseField.js": {"classlist": ["validator.GroupBaseField"], "name": "GroupBaseField.js", "module": "validator"}, "SelectField.js": {"classlist": ["validator.SelectField"], "name": "SelectField.js", "module": "validator"}, "IntegerField.js": {"classlist": ["validator.IntegerField"], "name": "IntegerField.js", "module": "validator"}, "PasswordField.js": {"classlist": ["validator.PasswordField"], "name": "PasswordField.js", "module": "validator"}, "DoubleField.js": {"classlist": ["validator.DoubleField"], "name": "DoubleField.js", "module": "validator"}, "CustomField.js": {"classlist": ["validator.CustomField"], "name": "CustomField.js", "module": "validator"}, "TextBaseField.js": {"classlist": ["validator.TextBaseField"], "name": "TextBaseField.js", "module": "validator"}}, "modules": {"validator": {"description": "This is the main form validator class that will represent a form. This widget will allow developers to easily\ntransform a standard form into a fully interactive form that handle almost all\ninvalid inputs gracefully and improve user experience.", "submodules": [], "classlist": ["validator.BaseInputField", "validator.Button", "validator.CheckboxField", "validator.CustomField", "validator.DoubleField", "validator.GroupBaseField", "validator.IntegerField", "validator.MatchField", "validator.PasswordField", "validator.SelectField", "validator.TextBaseField", "validator.GLOBAL", "validator.Validator"], "filelist": ["BaseInputField.js", "Button.js", "CheckboxField.js", "CustomField.js", "DoubleField.js", "GroupBaseField.js", "IntegerField.js", "MatchField.js", "PasswordField.js", "SelectField.js", "TextBaseField.js", "Validator.js"], "subdata": {}, "name": "validator"}}, "classmap": {"validator.DoubleField": {"name": "validator.DoubleField", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " Configuration JSON."}], "description": "This input field is for text input of doubles or floats."}], "namespace": "validator", "module": "validator", "methods": {"isValid": {"return": {"type": "boolean", "description": "true if the input is a valid double."}, "description": "This will return true if the input matches the double regular expression\nand, if max decimals are set, the number of decimals places.", "guessedname": "isValid", "guessedtype": "function"}}, "extends": "validator.TextBaseField", "superclass": "validator.TextBaseField", "file": "DoubleField.js", "shortname": "DoubleField", "requires": "yahoo.base, yahoo.dom, yahoo.event", "configs": {"maxInclusive": {"type": "boolean", "description": "This is set to true if the maximum allowed values boundary is inclusive", "guessedname": "maxInclusive", "guessedtype": "property"}, "max": {"type": "number", "description": "This is the maximum allowed value in the double field. Default value\nis the maximum value for an integer", "guessedname": "max", "guessedtype": "property"}, "maxDecimalPlaces": {"type": "number", "description": "If set, this will restrict the number of decimal places allowed on the double.  This could\nbe done with regular expression, but this makes it a bit easier for everyone.", "guessedname": "maxDecimalPlaces", "guessedtype": "property"}, "minInclusive": {"type": "boolean", "description": "This is set to true if the minimum allowed values boundary is inclusive", "guessedname": "minInclusive", "guessedtype": "property"}, "min": {"type": "number", "description": "This is the minimum allowed value in the double field.  Default value\nis the minimum value for an integer", "guessedname": "min", "guessedtype": "property"}}, "description": "This input field is for text input of doubles or floats."}, "validator.CustomField": {"name": "validator.CustomField", "constructors": [{"description": "This is a catch all class for types of input that do not fit the existing input types."}], "namespace": "validator", "module": "validator", "methods": {"enable": {"description": "Calls the enable function on the custom validator object if it exists.", "guessedname": "enable", "guessedtype": "function"}, "checkIndicators": {"return": {"type": "boolean", "description": "True if input is valid"}, "description": "This will ensure the proper dom is showing to indicate\nthat the input is valid or invalid.", "guessedname": "checkIndicators", "guessedtype": "function"}, "isValid": {"return": {"type": "boolean", "description": "false if the value in the select input matches the specified empty value"}, "description": "Returns true if the value selected in the dom doesn't match the value\nset for the emptyValue property.", "guessedname": "isValid", "guessedtype": "function"}, "clear": {"params": [{"type": "boolean", "name": "silent", "description": " True if the clear action will not invoke an on change event."}], "description": "Calls the clear function on the custom validator object if it exists.", "guessedname": "clear", "guessedtype": "function"}, "isEmpty": {"return": {"type": "boolean", "description": "returns what the validator object's empty function returns."}, "description": "Executs the custom validator object's isEmpty function", "guessedname": "isEmpty", "guessedtype": "function"}, "getId": {"return": {"type": "String", "description": "id The id that was set to the custom validator on initialization."}, "description": "If the id is set, that value will be returned.  If not, then it will\nsee if the validator object", "guessedname": "getId", "guessedtype": "function"}, "disable": {"description": "Calls the disable function on the custom validator object if it exists.", "guessedname": "disable", "guessedtype": "function"}, "executeVoidFunction": {"private": "", "description": "This will execute the function with the given name with the assumption it returns nothing", "guessedname": "executeVoidFunction", "guessedtype": "function"}, "insertBeside": {"params": [{"type": "HTMLElement", "name": "el", "description": " DOM object to be insert beside the main input."}], "description": "This will call the insertBeside function on the validator Object if it exists.  It will\npass the dom object that is to be inserted.", "guessedname": "insertBeside", "guessedtype": "function"}, "turnOn": {"description": "Calls the turnOn function on the custom validator object if it exists.", "guessedname": "turnOn", "guessedtype": "function"}, "turnOff": {"description": "Calls the turnOff function on the custom validator object if it exists.", "guessedname": "turnOff", "guessedtype": "function"}, "executeFunction": {"guessedname": "executeFunction", "return": {"type": "Object", "description": "value returned from the function call"}, "description": "This will execute the function with the specified name on the validator object", "private": "", "guessedtype": "function"}}, "extends": "validator.BaseInputField", "superclass": "validator.BaseInputField", "file": "CustomField.js", "shortname": "CustomField", "requires": "yahoo.base, yahoo.dom, yahoo.event", "configs": {"validatorObject": {"type": "{Object}", "description": "This will be an object that can optionally implement all the\nfunctions used by an input field.  This can also be a function, which \nretrieves the object, or a string, which can be the name of an instance\nobject or function call to retreive it.", "guessedname": "validatorObject", "guessedtype": "property"}, "id": {"type": "any", "description": "Optional id value for identifying the custom input in the validator", "guessedname": "id", "guessedtype": "property"}}, "description": "This is a catch all class for types of input that do not fit the existing input types."}, "validator.PasswordField": {"name": "validator.PasswordField", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " Configuration object"}], "description": "This field is for password input on a form.  This would be used for having users\nselect a password, and requiring a minimum strength to be required."}], "namespace": "validator", "module": "validator", "configs": {"med": {"type": "regex", "description": "This is the regular expression that determines if the medium (second) level of\nstrength has been met.  The default is 8 alpha numeric characters with letters and symbols.", "guessedname": "med", "guessedtype": "property"}, "min": {"type": "regex", "description": "This is the regular expression that determines if the minimum (first) level of\nstrength has been met.  The default is 8 alpha numeric characters.", "guessedname": "min", "guessedtype": "property"}, "max": {"type": "regex", "description": "This is the regular expression that determines if the maximum (third) level of\nstrength has been met.", "guessedname": "max", "guessedtype": "property"}, "minIndicator": {"type": "HTMLElement", "description": "The dom object that appears when the first level of strength has been met (min)", "guessedname": "minIndicator", "guessedtype": "property"}, "requiredLevel": {"type": "{string|number}", "description": "This is the required level of strength for the password field to be\nconsidered valid.  In this field, 1=min, 2=med, 3=max.  You\ncan set this property by using min, med, or max, or 1,2 or 3.  The default\nstrength level is medium.", "guessedname": "requiredLevel", "guessedtype": "property"}, "medIndicator": {"type": "HTMLElement", "description": "The dom object that appears when the second level of strength has been met (med)", "guessedname": "medIndicator", "guessedtype": "property"}}, "methods": {"showIncorrectIndicator": {"description": "Calls the super class' showIncorrectIndicator, then ensures the proper\npassword strength indicator is shown.", "guessedname": "showIncorrectIndicator", "guessedtype": "function"}, "showNoIndicators": {"description": "Calls the super class' showNoIndicators, then ensures the proper\npassword strength indicator is shown.", "guessedname": "showNoIndicators", "guessedtype": "function"}, "isValid": {"return": {"type": "boolean", "description": "true if the required level of password strength has been met."}, "description": "This will return true if the required level of strength has been\nmet by the current input.", "guessedname": "isValid", "guessedtype": "function"}, "showPasswordIndicator": {"description": "This will show the proper indicator based on the strength of the password\nput in the password field.", "guessedname": "showPasswordIndicator", "guessedtype": "function"}, "showCorrectIndicator": {"description": "Calls the super class' showCorrectIndicator, then ensures the proper\npassword strength indicator is shown.", "guessedname": "showCorrectIndicator", "guessedtype": "function"}, "getMatchedLevel": {"return": {"type": "number", "description": "the level of password strength that has been reached, 0 if none have."}, "description": "This will return the level which the input matches", "guessedname": "getMatchedLevel", "guessedtype": "function"}, "checkIndicators": {"return": {"type": "boolean", "description": "true if this password field is considered valid."}, "description": "This will ensure the proper password indicator is shown, as well\nas the proper indicators showing if the field is valid or invalid.", "guessedname": "checkIndicators", "guessedtype": "function"}}, "extends": "validator.TextBaseField", "superclass": "validator.TextBaseField", "file": "PasswordField.js", "shortname": "PasswordField", "requires": "yahoo.base, yahoo.dom, yahoo.event", "properties": {"MinimumPassword": {"type": "regex", "static": "", "description": "This is the regular expression used to check if the user's password meets the minimum password strength criteria.", "guessedname": "MinimumPassword", "guessedtype": "property"}, "MediumPassword": {"type": "regex", "static": "", "description": "This is the regular expression used to check if the user's password meets medium password strength criteria.", "guessedname": "MediumPassword", "guessedtype": "property"}, "StrongPassword": {"type": "regex", "static": "", "description": "This is the regular expression used to check if the user's password meets the strongest password strength criteria.", "guessedname": "StrongPassword", "guessedtype": "property"}}, "description": "This field is for password input on a form.  This would be used for having users\nselect a password, and requiring a minimum strength to be required."}, "validator.IntegerField": {"name": "validator.IntegerField", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " Configuration JSON."}], "description": "This input field is for text input of whole numbers."}], "namespace": "validator", "module": "validator", "methods": {"isValid": {"return": {"type": "boolean", "description": "true if the field is a valid integer"}, "description": "This method returns true if the input in the input DOM's value matches\nthe format required for an integer.", "guessedname": "isValid", "guessedtype": "function"}}, "extends": "validator.DoubleField", "superclass": "validator.DoubleField", "file": "IntegerField.js", "shortname": "IntegerField", "requires": "yahoo.base, yahoo.dom, yahoo.event", "description": "This input field is for text input of whole numbers."}, "validator.Validator": {"name": "validator.Validator", "title": "Form Validator Widget", "configs": {"onSubmit": {"type": "Function", "description": "This is a function that is called after the form is checked, and is valid, but before\nthe actual submit takes place.  If this function returns true, the form will submit,\nif it returns false, the form submission will not proceed.", "guessedname": "onSubmit", "guessedtype": "property"}, "createIncorrectIndicator": {"type": "boolean", "description": "This is a setting passed onto each field added to the validator.  If\nthis is true, the input field will create an incorrect indicator based\nsetting in the configuration object passed to the field, or on the default settings passed to it\nfrom this class.", "guessedname": "createIncorrectIndicator", "guessedtype": "property"}, "form": {"type": "HTMLElement", "description": "This is the form DOM object (or any DOM object) that surrounds\nthe inputs of the form. (NOTE: Not all inputs HAVE to be inside the form dom if your using the JSON method\nto declar your fields).", "guessedname": "form", "guessedtype": "property"}, "defaultCorrectIndicatorCss": {"type": "string", "description": "The default css used when creating the correct indicator dynamically.  This\ncss value is '' by default, and will be passed to any input field added\nto the validator if they do not already have this property set in their configuration.", "guessedname": "defaultCorrectIndicatorCss", "guessedtype": "property"}, "onSubmitScope": {"type": "Object", "description": "This is the scope in which the onSubmit function will be executed.  If this\nis null, the function will be executed in the global scope.", "guessedname": "onSubmitScope", "guessedtype": "property"}, "buttonJSON": {"type": "Object[]", "description": "This will hold the JSON configuration for all buttons passed to the form validator.\nThis will be intereated through, and the actual button objects created\nwhen the form is initialized.", "guessedname": "buttonJSON", "guessedtype": "property"}, "incorrectIndicatorText": {"type": "string", "description": "The default text that will be used to set the innerHTML of the incorrect indicator\nwhen it is created dynamically. A non breakable space by default, and will be passed to any input field added\nto the validator if they do not already have this property set in their configuration.", "guessedname": "incorrectIndicatorText", "guessedtype": "property"}, "checkOnSubmit": {"type": "boolean", "description": "Default value is false, when set to true, indicators on inputs, and the form's status will only\nupdate when the submit button is clicked.", "guessedname": "checkOnSubmit", "guessedtype": "property"}, "correctIndicatorText": {"type": "string", "description": "The default text that will be used to set the innerHTML of the correct indicator\nwhen it is created dynamically. A non breakable space by default, and will be passed to any input field added\nto the validator if they do not already have this property set in their configuration.", "guessedname": "correctIndicatorText", "guessedtype": "property"}, "defaultIndicatorDomType": {"type": "string", "description": "This is the name of the type of dom object used to create the indicators.\nThe default is SPAN", "guessedname": "defaultIndicatorDomType", "guessedtype": "property"}, "fieldJSON": {"type": "Object[]", "description": "This will hold the JSON configuration for all inputs passed to the form validator.\nThis will be intereated through, and the actual input field objects created\nwhen the form is initialized.", "guessedname": "fieldJSON", "guessedtype": "property"}, "excludedButtons": {"type": "string[]", "description": "List of ids of submit buttons that are exempt from the form validator.  For instance, you may\nhave a submit button that deletes the data pertaining to the record open in the form.\nObviously the form should not have to be filled in correctly to do this.", "guessedname": "excludedButtons", "guessedtype": "property"}, "defaultIncorrectIndicatorCss": {"type": "string", "description": "The default css used when creating the incorrect indicator dynamically.  This\ncss value is '' by default, and will be passed to any input field added\nto the validator if they do not already have this property set in their configuration.", "guessedname": "defaultIncorrectIndicatorCss", "guessedtype": "property"}, "createCorrectIndicator": {"type": "boolean", "description": "This is a setting passed onto each field added to the validator.  If\nthis is true, the input field will create an correct indicator based\nsetting in the configuration object passed to the field, or on the default settings passed to it\nfrom this class.", "guessedname": "createCorrectIndicator", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "Object", "name": "config", "description": " Configuration object containing everything for configuring the form validator object."}], "description": "This is the main form validator class that will represent a form. This widget will allow developers to easily\ntransform a standard form into a fully interactive form that handle almost all\ninvalid inputs gracefully and improve user experience."}], "namespace": "validator", "module": "validator", "events": {"onsubmit": {"description": "This is the event that is invoked the form is submitted.", "guessedname": "CE_ONSUBMIT", "guessedtype": "property"}}, "methods": {"BOOLEANSETTER": {"return": {"type": "booelan", "description": "a boolean"}, "description": "Static function that will set a boolean value for a property", "static": "", "guessedname": "BOOLEANSETTER", "guessedtype": "function", "params": [{"type": "boolean|string", "name": "val", "description": " value of yes/no/true/false"}]}, "addInlineInput": {"params": [{"type": "HTMLEelement", "name": "inputDOM", "description": " Element that has form validator attributes declared."}], "description": "This will take the given inputDOM, extract all form validator specific\nattributes from the DOM object, and create an input field from that and add\nit to this form validator.", "guessedname": "addInlineInput", "guessedtype": "function"}, "_initializeEvents": {"description": "This will initialize the submit and reset events on the form validator.  The form\nvalidator will listen for these events and cancel any if need be.", "guessedname": "_initializeEvents", "guessedtype": "function"}, "initializeInlineInputs": {"description": "This function will initialize inputs that are declared inline.  If they are already\ndeclared in the JSON, then their JSON definition is updated with any settings that are set inline.", "guessedname": "initializeInlineInputs", "guessedtype": "function"}, "_onFormSubmit": {"params": [{"type": "Event", "name": "ev", "description": " Event that caused the submit"}], "description": "This will get called when the form is submitted.  This will prevent the event\nfrom succeeding if the form is invalid.", "guessedname": "_onFormSubmit", "guessedtype": "function"}, "submitForm": {"description": "This will call the form's submit method.  If the form is not valid, the form\nwill not submit.", "guessedname": "submitForm", "guessedtype": "function"}, "constructInlineGroup": {"description": "This will add all the member doms to the given group JSON def.", "guessedname": "constructInlineGroup", "guessedtype": "function"}, "clear": {"params": [{"type": "boolean", "name": "silent", "description": " If set to true, the form validator's status will not update."}], "description": "This will clear all inputs.  If silent mode is true, the indicators and buttons\nwill not update until an input is changed, or a submit button is pressed.", "guessedname": "clear", "guessedtype": "function"}, "onFormValueChanged": {"description": "Called when a value in the form changes.  This will determine if the submit buttons\nare enabled and disabled.", "guessedname": "onFormValueChanged", "guessedtype": "function"}, "initializeButtons": {"description": "This will initialize all buttons given in the button list, well as\nany submit buttons in the form not in the exclude list", "guessedname": "initializeButtons", "guessedtype": "function"}, "enableButtons": {"description": "This will enable all submit buttons", "guessedname": "enableButtons", "guessedtype": "function"}, "addInput": {"params": [{"type": "BaseInputField", "name": "newField", "description": " Input field that is to be added to the Form."}], "description": "This will add the given field to the form validator.  It will first, setup\nthe input using the setupInput function, then it will add it to it's list\nof input fields.", "guessedname": "addInput", "guessedtype": "function"}, "checkFormValues": {"return": {"type": "boolean", "description": "true if the form is valid."}, "description": "Checks the form values and makes sure the proper indicators are showing and returns\ntrue if the form is considered valid.", "guessedname": "checkFormValues", "guessedtype": "function"}, "checkAttribute": {"params": [{"type": "BaseInputField", "name": "target", "description": " The input field who's attribute is being checked"}, {"type": "string", "name": "attName", "description": " Name of the attribute in the main form validator object that holds the Default value if the target's targetAttName has no value"}, {"type": "strubg", "name": "targetAttName", "description": " Name of the target's attribute that is being checked for a value"}], "description": "This is used to check to see if an attributes has been set on the target, if\nnot then the attName property is used to retreive a default value set in the Form's\nmain object.", "guessedname": "checkAttribute", "guessedtype": "function"}, "_onFormReset": {"params": [{"type": "Event", "name": "ev", "description": " Event that caused the reset."}], "description": "This will get called when the form is reset, this will cause the form to recheck all it's values\nand show the proper indicators.", "guessedname": "_onFormReset", "guessedtype": "function"}, "getInput": {"return": {"type": "BaseInputField", "description": "field with the given id."}, "description": "This will return an input with the given id.  Any inputs with a null\nid will never be returned from this function.", "guessedname": "getInput", "guessedtype": "function"}, "initializeInputs": {"description": "This function will process the input field configurations in the fieldJSON\nproperty, and have all fields instantiated and initialized and stored\nin the inputFields property.", "guessedname": "initializeInputs", "guessedtype": "function"}, "setupInput": {"params": [{"type": "BaseInputField", "name": "newField", "description": " Input field that is to be added to the Form."}], "description": "This will take the new field that is to be added to the form, and apply any\ndefault settings from the Form's defaults to the input field, if they haven't been set.\nFor instance, defaultCorrectIndicatorCss will be applied to correctIndicatorCss property\nin the input field if that property has not been set for the newField", "guessedname": "setupInput", "guessedtype": "function"}, "disableButtons": {"description": "This will disable all submit buttons", "guessedname": "disableButtons", "guessedtype": "function"}}, "file": "Validator.js", "shortname": "Validator", "requires": "yahoo.base, yahoo.dom, yahoo.event", "properties": {"inputFields": {"type": "BaseInputField[]", "description": "This is a list of input field objects that represent inputs that are to be validated using the validator.", "guessedname": "inputFields", "guessedtype": "property"}, "buttons": {"type": "Button[]", "description": "List of buttons that will only enable if all the inputs on the form\nvalidator are correct.", "guessedname": "buttons", "guessedtype": "property"}, "customGlobal": {"type": "Object", "description": "This is used for custom inputs so their validator object can be stored in the form\nuntil the instance of is pulled out of an inline attribute", "guessedname": "customGlobal", "guessedtype": "property"}}, "description": "This is the main form validator class that will represent a form. This widget will allow developers to easily\ntransform a standard form into a fully interactive form that handle almost all\ninvalid inputs gracefully and improve user experience."}, "validator.TextBaseField": {"name": "validator.TextBaseField", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " Configuratino settings for the input."}, {"type": "boolean", "name": "initialize", "description": " Flag that says whether or not to call the initialize input function"}], "description": "This class is the text base input field and will be extended by all\nInputs who's values will be text based in anyway.  Examples include a number input,\nselect box or a text input."}], "namespace": "validator", "module": "validator", "methods": {"initializeEvents": {"params": [{"type": "HTMLElement", "name": "target", "description": " The Object that will be listening to the key up and blur events of the input DOM."}], "description": "This will attach the keyup event to the input dom.", "guessedname": "initializeEvents", "guessedtype": "function"}, "enable": {"description": "This will enable the input.", "guessedname": "enable", "guessedtype": "function"}, "checkIndicators": {"return": {"type": "boolean", "description": "True if input is valid"}, "description": "This will ensure the proper css and/or dom is showing to indicate\nthat the input is valid or invalid.", "guessedname": "checkIndicators", "guessedtype": "function"}, "showNoIndicators": {"description": "This will ensure NO indicators are showing.\nmethod @showNoIndicators", "guessedname": "showNoIndicators", "guessedtype": "function"}, "isValid": {"return": {"type": "boolean", "description": "true if the input is not empty, and it is not longer than the maximum length setting"}, "description": "Returns true only if the input is not empty, and it is not longer than the maximum length setting", "guessedname": "isValid", "guessedtype": "function"}, "clear": {"params": [{"type": "boolean", "name": "silent", "description": " Set to true if you do not want the clear to invoke a form validator change event."}], "description": "This will reset the text field to ''", "guessedname": "clear", "guessedtype": "function"}, "showIncorrectIndicator": {"description": "This will ensure that the correct indicator is hidden and the correct css is not used, and will\nensure that the incorrect indicator is showing, and the correct css is applied.", "guessedname": "showIncorrectIndicator", "guessedtype": "function"}, "getId": {"return": {"type": "string", "description": "id of the input dom."}, "description": "Returns the id of the input dom", "guessedname": "getId", "guessedtype": "function"}, "insertBeside": {"params": [{"type": "HTMLElement", "name": "el", "description": " DOM object to be insert beside the main input."}], "description": "This function will insert the given el beside the inputDOM.", "guessedname": "insertBeside", "guessedtype": "function"}, "initializeInput": {"description": "This will setup the indicators for the input", "guessedname": "initializeInput", "guessedtype": "function"}, "checkFormat": {"description": "This will ensure the input is formatted as desired using the formatter, but only\nif the input is valid.  If it does not match the regular expression, this will not call\nthe format method/object's format method.", "guessedname": "checkFormat", "guessedtype": "function"}, "disable": {"description": "This will disable the input.", "guessedname": "disable", "guessedtype": "function"}, "isEmpty": {"return": {"type": "boolean", "description": "true if the input is not ''"}, "description": "Returns true if the input dom has an empty string value.", "guessedname": "isEmpty", "guessedtype": "function"}, "showCorrectIndicator": {"description": "This will ensure that the incorrect indicator is hidden and the incorrect css is not used, and will\nensure that the correct indicator is showing, and the correct css is applied.", "guessedname": "showCorrectIndicator", "guessedtype": "function"}, "getInputDOM": {"return": {"type": "HTMLElement", "description": "input dom for this field."}, "description": "This will return the dom that represents the input.", "guessedname": "getInputDOM", "guessedtype": "function"}}, "extends": "validator.BaseInputField", "superclass": "validator.BaseInputField", "file": "TextBaseField.js", "shortname": "TextBaseField", "configs": {"regex": {"type": "regex", "description": "Regular expression the input must match in order for the input to be correct.\nIf set to null, this is ignored in the isValid function.", "guessedname": "regex", "guessedtype": "property"}, "inputDOM": {"type": "HTMLElement|string", "description": "This is the main input DOM that the validator will check input on.  This can be set as the id of the\nobject, or as the dom object itself.", "guessedname": "inputDOM", "guessedtype": "property"}, "formatter": {"type": "Function|Object", "description": "Formatter used for formatting the result typed into the text field.\nThis can be a function that takes the input text and returns it in a\ndesired format, or it could be an object that has a format function.", "guessedname": "formatter", "guessedtype": "property"}, "textType": {"type": "string", "description": "This property is optional for those who wish to use the pre-canned regular expressions.\nThis can be set to any of the following types <br/>\n<ul>\n<li>Email</li>\n<li>Phone</li>\n<li>CreditCard</li>\n<li>Zipcode</li>\n<li>Postalcode</li>\n</ul>", "guessedname": "textType", "guessedtype": "property"}, "maxLength": {"type": "Number", "description": "This will state the maximum length of the string in the input.  This\nvalue is 255 by default.", "guessedname": "maxLength", "guessedtype": "property"}}, "description": "This class is the text base input field and will be extended by all\nInputs who's values will be text based in anyway.  Examples include a number input,\nselect box or a text input."}, "validator.CheckboxField": {"name": "validator.CheckboxField", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " Configuration for the checkbox field.  Probably just the validWhenChecked property"}], "description": "This will represent a checkbox field in the form validator.  Checkbox\nfield can be put into a group based field or left on its' own."}], "namespace": "validator", "module": "validator", "methods": {"initializeEvents": {"params": [{"type": "HTMLElement", "name": "target", "description": " The object that will be listening to the events of the click event of the input DOM"}], "description": "This will initialize the checkbox so the form status is updated when the checkbox is clicked.", "guessedname": "initializeEvents", "guessedtype": "function"}, "enable": {"description": "This enables the checkbox", "guessedname": "enable", "guessedtype": "function"}, "checkIndicators": {"return": {"type": "boolean", "description": "True if input is valid"}, "description": "This will ensure the proper css and/or dom is showing to indicate\nthat the input is valid or invalid.", "guessedname": "checkIndicators", "guessedtype": "function"}, "showNoIndicators": {"description": "This will ensure no indicators are showing, or css applied to the input that\nwould signify correctness or incorrectness.", "guessedname": "showNoIndicators", "guessedtype": "function"}, "isValid": {"return": {"type": "boolean", "description": "true if the input is not empty, and it is not longer than the maximum length setting"}, "description": "Returns true only if the input is not empty, and it is not longer than the maximum length setting", "guessedname": "isValid", "guessedtype": "function"}, "clear": {"description": "This will set the checkbox back to unchecked if checked is valid, and checked, if unchecked is valid.", "guessedname": "clear", "guessedtype": "function"}, "getId": {"return": {"type": "String", "description": "id of the checkbox dom."}, "description": "Returns the id of the group based field.", "guessedname": "getId", "guessedtype": "function"}, "initializeInput": {"description": "Sets up the indicators", "guessedname": "initializeInput", "guessedtype": "function"}, "disable": {"description": "This disables the checkbox", "guessedname": "disable", "guessedtype": "function"}, "isEmpty": {"return": {"type": "boolean", "description": "true if the checkbox is not valid."}, "description": "Returns the true if the checkbox input is invalid.", "guessedname": "isEmpty", "guessedtype": "function"}, "insertBeside": {"params": [{"type": "HTMLElement", "name": "el", "description": " DOM object to be insert beside the main input."}], "description": "Inidicators are usually applicable to checkboxes, so creating them dynamically doesn't\nmake much sense, this method does nothing.", "guessedname": "insertBeside", "guessedtype": "function"}, "getInputDOM": {"return": {"type": "HTMLElement", "description": "input dom for this field."}, "description": "This will return the dom that represents the input.", "guessedname": "getInputDOM", "guessedtype": "function"}}, "extends": "validator.BaseInputField", "superclass": "validator.BaseInputField", "file": "CheckboxField.js", "shortname": "CheckboxField", "requires": "yahoo.base, yahoo.dom, yahoo.event", "configs": {"inputDOM": {"type": "HTMLElement", "description": "The dom that represents the checkbox", "guessedname": "inputDOM", "guessedtype": "property"}, "validWhenChecked": {"type": "boolean", "description": "If set to true, this checkbox will be considered valid if checked", "guessedname": "validWhenChecked", "guessedtype": "property"}}, "description": "This will represent a checkbox field in the form validator.  Checkbox\nfield can be put into a group based field or left on its' own."}, "validator.BaseInputField": {"name": "validator.BaseInputField", "configs": {"correctIndicatorCss": {"type": "string", "description": "This is the css that is to be applied to the indicator.  Default\nwill be correctIndicator", "guessedname": "correctIndicatorCss", "guessedtype": "property"}, "incorrectIndicator": {"type": "HTMLElement", "description": "If set, this will be shown to indicate that the input is incorrect", "guessedname": "incorrectIndicator", "guessedtype": "property"}, "createIncorrectIndicator": {"type": "boolean", "description": "This will be set to true if the Incorrect indicator is to be created\nupon instantiation of the input field.", "guessedname": "createIncorrectIndicator", "guessedtype": "property"}, "correctCss": {"type": "string", "description": "If set, this will be applied to the the input to signify that it is correct", "guessedname": "correctCss", "guessedtype": "property"}, "correctIndicator": {"type": "HTMLElement", "description": "If set, this will be shown to indicate that the input is correct", "guessedname": "correctIndicator", "guessedtype": "property"}, "incorrectIndicatorText": {"type": "string", "description": "This will be the text that will be used inside the DOM of the incorrect indicator.\nIf none is provided, none will be used", "guessedname": "incorrectIndicatorText", "guessedtype": "property"}, "indicatorType": {"type": "string", "description": "This is the DOM element type for the indicator.  The default for\nthis will be span.", "guessedname": "indicatorType", "guessedtype": "property"}, "isOn": {"type": "boolean", "description": "If false, this will signal that the input is considered off, and is not factored\ninto the validation.", "guessedname": "isOn", "guessedtype": "property"}, "correctIndicatorText": {"type": "string", "description": "This will be the text that will be used inside the DOM of the correct indicator.\nIf none is provided, none will be used", "guessedname": "correctIndicatorText", "guessedtype": "property"}, "incorrectCss": {"type": "string", "description": "If set, this will be applied to the the input to signify that it is incorrect", "guessedname": "incorrectCss", "guessedtype": "property"}, "disabled": {"type": "boolean", "description": "This is set to true when the input is considered disabled.  False otherwise", "guessedname": "disabled", "guessedtype": "property"}, "incorrectIndicatorCss": {"type": "string", "description": "This is the css that is to be applied to the indicator.  Default\nwill be incorrectIndicator", "guessedname": "incorrectIndicatorCss", "guessedtype": "property"}, "createCorrectIndicator": {"type": "boolean", "description": "This will be set to true if the correct indicator is to be created\nupon instantiation of the input field.", "guessedname": "createCorrectIndicator", "guessedtype": "property"}, "optional": {"type": "boolean", "description": "If set, this will show that the input is considered optional, and if not filled\nin, won't cause the form to be invalid.", "guessedname": "optional", "guessedtype": "property"}}, "constructors": [{"description": "This class is what all Input fields used in the form validator will inherit from.  This provides\nthe basic general attributes and functions required by all input fields."}], "namespace": "validator", "module": "validator", "events": {"onchange": {"description": "This is the even that is invoked when the input field is considered changed", "guessedname": "CE_ONCHANGE", "guessedtype": "property"}}, "methods": {"BOOLEANSETTER": {"return": {"type": "boolean", "description": "a boolean"}, "description": "Static function that will set a boolean value for a property", "static": "", "guessedname": "BOOLEANSETTER", "guessedtype": "function", "params": [{"type": "boolean|string", "name": "val", "description": " value of yes/no/true/false"}]}, "standardRegexSetter": {"return": {"type": "Regex", "description": "regular expression"}, "description": "This is the setter used for setting regular expression properties.  IF the value is a string,\nit will parse the regular expression and return it.  If it is a regex, it will simply return the\nvalue passed in.", "static": "", "guessedname": "standardRegexSetter", "guessedtype": "function", "params": [{"type": "String|Regex", "name": "val", "description": ""}]}, "showCorrectIndicator": {"description": "This will be overriden by subclasses, but this will hide the incorrect\nindicator and show the correct indicator if there is one.  It will also\napply the correct css to the input if there is correct css defined.", "guessedname": "showCorrectIndicator", "guessedtype": "function"}, "showNoIndicators": {"description": "This will be overriden by subclasses, but this will hide all indicators\nand remove all indicator css from the input.", "guessedname": "showNoIndicators", "guessedtype": "function"}, "initializer": {"description": "Initializer, called before the class is instantiated", "guessedname": "initializer", "guessedtype": "function"}, "_evtOnChange": {"description": "This will get called when the input is changed, which will in turn fire the inputChangedEvent.\nIf the input is in a group, the group's event will get fired, not the field's", "guessedname": "_evtOnChange", "guessedtype": "function"}, "inputIsOn": {"return": {"type": "boolean", "description": "true if the input is on."}, "description": "Returns true if the given input is turned on.", "guessedname": "inputIsOn", "guessedtype": "function"}, "turnOn": {"description": "This will turn the input on.  After this it WILL be considered\nin determining if the form is valid.", "guessedname": "turnOn", "guessedtype": "function"}, "turnOff": {"description": "This will turn the input off.  After this it will not be considered\nin determining if the form is valid.", "guessedname": "turnOff", "guessedtype": "function"}, "showIncorrectIndicator": {"description": "This will be overriden by subclasses, but this will hide the correct\nindicator and show the incorrect indicator if there is one.  It will also\napply the incorrect css to the input if there is incorrect css defined.", "guessedname": "showIncorrectIndicator", "guessedtype": "function"}, "initializeInput": {"params": [{"type": "Validator.Form", "name": "validator", "description": " Validator to which the Base Input gets default values from."}], "description": "To be overridden by subclasses.  This will typically initialize all inidicators\nand any other initialization that is required", "guessedname": "initializeInput", "guessedtype": "function"}, "getId": {"return": {"type": "number", "description": "the id of the input field"}, "description": "The input can optionally override this function so they can\nretrieve their particular input from the form validator.  If they do\nnot override this, then everyting will still work, they just won't be\nable to retreive it by name from the form validator.", "guessedname": "getId", "guessedtype": "function"}, "destructor": {"description": "destructor, called after the class is destroyed", "guessedname": "destructor", "guessedtype": "function"}, "isEmpty": {"return": {"type": "boolean", "description": "True if the input field is considered empty."}, "description": "Returns true if the input for the field is considered empty", "guessedname": "isEmpty", "guessedtype": "function"}, "getInputDOM": {"return": {"type": "HTMLElement", "description": "input dom for this field."}, "description": "This will return the dom that represents the input.  This will be overriden\nby all subclasses", "guessedname": "getInputDOM", "guessedtype": "function"}, "initializeEvents": {"description": "This will initialize the events that will notify this input if it was changed\nIf target is null, then the target will be the Input Field.", "guessedname": "initializeEvents", "guessedtype": "function"}, "enable": {"description": "This will set the disabled attribute to false.", "guessedname": "enable", "guessedtype": "function"}, "setupDomItem.": {"params": [{"type": "HTMLElement", "name": "el", "description": " Element that will be used as an indicator."}, {"type": "String", "name": "html", "description": " Html that will go inside the el"}, {"type": "String", "name": "className", "description": " className that is to be applied to the el."}], "description": "If the given EL is a string, it will create a dom object and have it inserted\nbeside the input.  It will then ensure that all the defaults are set on the dom.", "guessedname": "setupDomItem", "guessedtype": "function"}, "isValid": {"return": {"type": "boolean", "description": "returns true if the input for the field is valid."}, "description": "Returns true if the input for the field is valid.  This must\nbe overridden by the subclasses.", "guessedname": "isValid", "guessedtype": "function"}, "disable": {"description": "This will set the disabled attribute to true.", "guessedname": "disable", "guessedtype": "function"}, "setupIndicators": {"description": "This function will setup the input field based on the attributes\ngiven in the constructor and attributes that may be inline in the DOM.", "guessedname": "setupIndicators", "guessedtype": "function"}, "standardElSetter": {"return": {"type": "HTMLElement", "description": "dom object"}, "description": "Static function for setting an dom element as an attribute.  This will\nallow that attribute to support an id or the element itself.", "static": "", "guessedname": "standardElSetter", "guessedtype": "function", "params": [{"type": "HTMLElement|String", "name": "el", "description": " Id or el that is to be set for the property in question."}]}, "checkIndicators": {"description": "This will ensure the proper css and/or dom is showing to indicate\nthat the input is valid or invalid.", "guessedname": "checkIndicators", "guessedtype": "function"}, "clear": {"params": [{"type": "boolean", "name": "silent", "description": " Set to true if the change event is NOT to be fired afterwards, as a result the form\nwould not be updated to reflect any changes."}], "description": "This will clear the input of all value.  This is typically overriden\nby the subclasses", "guessedname": "clear", "guessedtype": "function"}, "synchronize": {"params": [{"type": "HTMLElement", "name": "el", "description": " Element that will have inline attributes pertaining to the input."}], "description": "This will syncronize all attributes found inline in the EL.\nInline attributes will override JSON defined attributes.", "guessedname": "synchronize", "guessedtype": "function"}, "insertBeside": {"params": [{"type": "HTMLElement", "name": "el", "description": " DOM object to be insert beside the main input."}], "description": "This function will insert the given el beside the main input.  This must be overriden\nin the subclasses.  To implement this, simply find the parent of the current input\nstarting from the body tag or the form tag and work your way down until you find it.", "guessedname": "insertBeside", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "BaseInputField.js", "shortname": "BaseInputField", "requires": "yahoo.base, yahoo.dom, yahoo.event", "properties": {"DOUBLEREGEX": {"type": "regex", "static": "", "description": "Regular expression used by the DoubleField for ensuring the input matches the format of an double", "guessedname": "DOUBLEREGEX", "guessedtype": "property"}, "MAX_INTEGER": {"type": "number", "static": "", "description": "The maximum value for an integer.  Used as a default min/max value on number fields", "guessedname": "MAX_INTEGER", "guessedtype": "property"}, "INTEGERREGEX": {"type": "regex", "static": "", "description": "Regular expression used by the Integer field for ensuring the input matches the format of an integer", "guessedname": "INTEGERREGEX", "guessedtype": "property"}, "EMAILREGEX": {"type": "regex", "static": "", "description": "Regular expression for an e-mail.", "guessedname": "EMAILREGEX", "guessedtype": "property"}}, "description": "This class is what all Input fields used in the form validator will inherit from.  This provides\nthe basic general attributes and functions required by all input fields."}, "validator.GroupBaseField": {"name": "validator.GroupBaseField", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " JSON configuration object containing the properties of the GroupBaseField"}], "description": "This is a group based field and is for allowing inputs to be validated\nas a group of inputs. An example will be a group of checkboxes where only 1 or 2\nshould be selected.  Or if you want to have a user enter either a username, or an e-mail\naddress."}], "namespace": "validator", "module": "validator", "properties": {"members": {"type": "BaseInputField[]", "description": "When the member inputs are process and instantiated they are placed\nin this collection where they are persisted.", "guessedname": "members", "guessedtype": "property"}}, "methods": {"initializeEvents": {"params": [{"type": "Object", "name": "target", "description": " The target that will be listening to the events of the members."}], "description": "This will go through each member and initialize their event.", "guessedname": "initializeEvents", "guessedtype": "function"}, "enable": {"description": "This will enable all the inputs in the group", "guessedname": "enable", "guessedtype": "function"}, "checkIndicators": {"return": {"type": "boolean", "description": "True if input is valid"}, "description": "This will ensure the proper css and/or dom is showing to indicate\nthat the input is valid or invalid.  This will also ensure that the\nright indicators are showing on the children of the group.  Any change\nin a member of the group will cause this method in the group to be executed.", "guessedname": "checkIndicators", "guessedtype": "function"}, "showIncorrectIndicator": {"description": "This will show the incorrect indicator, and apply the incorrect css to the input\nif they are set for the group.  It will also ensure the correct indicator\nis not showing, and correct css is not applied.", "guessedname": "showIncorrectIndicator", "guessedtype": "function"}, "showCorrectIndicator": {"description": "This will show the correct indicator, and apply the correct css to the input\nif they are set for the group.  It will also ensure the incorrect indicator\nis not showing, and incorrect css is not applied.", "guessedname": "showCorrectIndicator", "guessedtype": "function"}, "initializeInput": {"params": [{"type": "Validator", "name": "validator", "description": " The validator this input gets it's default values from."}], "description": "This will take the members json and initialize the inputs.  Validator\nis required for setting up the field based on settings given to the\nmain form validator.", "guessedname": "initializeInput", "guessedtype": "function"}, "showNoIndicators": {"description": "This will ensure all indicators are not showing, and no indicator css\nis applied to the input", "guessedname": "showNoIndicators", "guessedtype": "function"}, "isValid": {"return": {"type": "boolean", "description": "true if the input is not empty, and it is not longer than the maximum length setting"}, "description": "Returns true only if the input is not empty, and it is not longer than the maximum length setting", "guessedname": "isValid", "guessedtype": "function"}, "clear": {"params": [{"type": "boolean", "name": "silent", "description": " True if this will call the on change event"}], "description": "This will call the clear method (in silent mode) on all member inputs.\nIf silent is true, it will then fire its own on change event.", "guessedname": "clear", "guessedtype": "function"}, "getId": {"return": {"type": "string", "description": "id of the group base field if the id property was set, null otherwise."}, "description": "Returns the id of the group based field.", "guessedname": "getId", "guessedtype": "function"}, "isGroup": {"return": {"type": "", "description": "boolean True all the time, as this is infact a group"}, "description": "Indicator function to help the form validator deal with the regular inputs and group\ninputs differently on some occasions.", "guessedname": "isGroup", "guessedtype": "function"}, "insertBeside": {"params": [{"type": "HTMLElement", "name": "el", "description": " DOM object to be insert beside the main input."}], "description": "Indicators are not created dynamically for groups at the moment.", "guessedname": "insertBeside", "guessedtype": "function"}, "turnOn": {"description": "This will turn on all the members of the group, including the group as well", "guessedname": "turnOn", "guessedtype": "function"}, "disable": {"description": "This will disable all the inputs in the group", "guessedname": "disable", "guessedtype": "function"}, "isEmpty": {"return": {"type": "boolean", "description": "true if all members of the group are empty"}, "description": "Returns true all the members of the group are empty", "guessedname": "isEmpty", "guessedtype": "function"}, "addInput": {"params": [{"type": "BaseInputField", "name": "newField", "description": " The new field to be added to the group."}], "description": "This will add the given field to the group as an input.", "guessedname": "addInput", "guessedtype": "function"}, "getInput": {"return": {"type": "BaseInputField", "description": "The field with the given id, null if no such field exists"}, "params": [{"type": "string", "name": "id", "description": " Id of an input"}], "description": "This will return any member input with the given id.", "guessedname": "getInput", "guessedtype": "function"}, "turnOff": {"description": "This will turn off all the members of the group, including the group as well", "guessedname": "turnOff", "guessedtype": "function"}, "getInputDOM": {"return": {"type": "HTMLElement", "description": "input dom for this field."}, "description": "This will return the dom that represents the input.", "guessedname": "getInputDOM", "guessedtype": "function"}}, "extends": "validator.BaseInputField", "superclass": "validator.BaseInputField", "file": "GroupBaseField.js", "shortname": "GroupBaseField", "requires": "yahoo.base, yahoo.dom, yahoo.event", "configs": {"membersJSON": {"type": "Object[]", "description": "This will contain the raw json of the input fields that will belong\nto the group input.", "guessedname": "membersJSON", "guessedtype": "property"}, "maxValid": {"type": "number", "description": "Maximum nuymber of fields that can be filled in.  Anymore (valid or not) and the group is invalid.\nIf not set, this is property is not used.", "guessedname": "maxValid", "guessedtype": "property"}, "minValid": {"type": "{number}", "description": "Minimum number of inputs that need to be properly filled in for this to be valid.\n0 to state that none have to be filled in. If not set, this is property is not used.", "guessedname": "minValid", "guessedtype": "property"}, "groupDOM": {"type": "HTMLElement|string", "description": "This is the dom that contains the group's child elements.  This is optional\nas the group's child inputs do not have to be contained in a dom element.  Use either\nthe id of the dom object, or the dom object itself.", "guessedname": "groupDOM", "guessedtype": "property"}, "id": {"type": "string", "description": "Property that can be optional set for the custom input for looking up the object", "guessedname": "id", "guessedtype": "property"}}, "description": "This is a group based field and is for allowing inputs to be validated\nas a group of inputs. An example will be a group of checkboxes where only 1 or 2\nshould be selected.  Or if you want to have a user enter either a username, or an e-mail\naddress."}, "validator.SelectField": {"name": "validator.SelectField", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " Configuration json object."}], "description": "This field is for SELET input.  This will ensure that a non-empty value is\nselected in the field in order for it to be considered valid."}], "namespace": "validator", "module": "validator", "methods": {"isValid": {"return": {"type": "boolean", "description": "false if the value in the select input matches the specified empty value"}, "description": "Returns true if the value selected in the dom doesn't match the value\nset for the emptyValue property.", "guessedname": "isValid", "guessedtype": "function"}, "clear": {"params": [{"type": "boolean", "name": "silent", "description": " If true, this function will not invoke the on change event listener."}], "description": "This will set the select field back to its' empty value.", "guessedname": "clear", "guessedtype": "function"}, "isEmpty": {"return": {"type": "boolean", "description": "true if the value in the select input matches the specified empty value"}, "description": "Returns true if the value in the select input matches the specified empty value", "guessedname": "isEmpty", "guessedtype": "function"}, "initializeEvents": {"params": [{"type": "Object", "name": "target", "description": " Object who will be listening for the select field's change event."}], "description": "This will attach the onchange event to the select DOM", "guessedname": "initializeEvents", "guessedtype": "function"}}, "extends": "validator.TextBaseField", "superclass": "validator.TextBaseField", "file": "SelectField.js", "shortname": "SelectField", "requires": "yahoo.base, yahoo.dom, yahoo.event", "configs": {"emptyValue": {"type": "String", "description": "This will be the value of the option that specifies no selected\nvalue.  '' by default.", "guessedname": "emptyValue", "guessedtype": "property"}}, "description": "This field is for SELET input.  This will ensure that a non-empty value is\nselected in the field in order for it to be considered valid."}, "validator.Button": {"name": "validator.Button", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " Configuration for the button that will be applied to the properties of the button (Probably just a button el)"}], "description": "This is a button object that will represent a button that is controlled\nby the form validator.  The buttons only function will be to enable and disable\ndepending on the validity of the data entered on the form."}], "namespace": "validator", "module": "validator", "methods": {"enable": {"description": "This will enable the button", "guessedname": "enable", "guessedtype": "function"}, "disable": {"description": "This will disable the button", "guessedname": "disable", "guessedtype": "function"}}, "file": "Button.js", "shortname": "Button", "requires": "yahoo.base, yahoo.dom, yahoo.event", "configs": {"buttonEl": {"type": "HTMLElement", "description": "This is the button that will be enable/disabled by the form validator", "guessedname": "buttonEl", "guessedtype": "property"}}, "description": "This is a button object that will represent a button that is controlled\nby the form validator.  The buttons only function will be to enable and disable\ndepending on the validity of the data entered on the form."}, "validator.MatchField": {"name": "validator.MatchField", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " Configuration JSON object."}], "description": "This field is for matching two inputs on the form.  For instance, this would\nbe useful for having users re-enter passwords, or re-enter e-mail addresses."}], "namespace": "validator", "module": "validator", "methods": {"isValid": {"return": {"type": "boolean", "description": "true if the match dom's value matches the input dom's value."}, "description": "This will return true if the match dom's value matches the input Dom's value.  The comparison\nwill be case sensitive depending on the case sensitive property.  The input is also NOT trimmed\nso leading or tailing whitespace is included in the comparison.", "guessedname": "isValid", "guessedtype": "function"}}, "extends": "validator.TextBaseField", "superclass": "validator.TextBaseField", "file": "MatchField.js", "shortname": "MatchField", "requires": "yahoo.base, yahoo.dom, yahoo.event", "configs": {"caseSensitive": {"type": "boolean", "description": "If set to true, this will do a case sensitive match on the two input DOM's values\nin order to determine if this field is valid.  True by default", "guessedname": "caseSensitive", "guessedtype": "property"}, "matchDOM": {"type": "HTMLElement", "description": "This is the dom that the match field will compare the input of its' own dom against.", "guessedname": "matchDOM", "guessedtype": "property"}}, "description": "This field is for matching two inputs on the form.  For instance, this would\nbe useful for having users re-enter passwords, or re-enter e-mail addresses."}, "validator.GLOBAL": {"file": "Validator.js", "name": "validator.GLOBAL", "namespace": "validator", "module": "validator", "guessedname": "YL", "guessedtype": "function", "shortname": "GLOBAL", "methods": {"ISFORM": {"return": {"type": "boolean", "description": "true if the given dom object is a form, or is marked as a form inline."}, "params": [{"type": "HTMLElement", "name": "dom", "description": " dom object"}], "description": "Returns true if the given dom is marked as a form (inline).", "guessedname": "ISFORM", "guessedtype": "function"}, "guid": {"return": {"type": "string", "description": "Random guid"}, "description": "This will make a random guid id.  This is useful for ensuring ajax requests\ndon't get cached.", "guessedname": "guid", "guessedtype": "function"}, "GETSUBMITBUTTONS": {"return": {"type": "", "description": "list of submit buttons with the given parent dom object."}, "params": [{"type": "HTMLElement", "name": "parent", "description": " Dom object who is being searched for submit buttons"}], "description": "THis will get all submit buttons in the form that are to be a part of the form validator.\nThis will exclude forms inside of other forms that are going to use the form validator.", "guessedname": "GETSUBMITBUTTONS", "guessedtype": "function"}, "GETINLINEDECLARATIONS": {"return": {"type": "HTMLElement[]", "description": "a list of all dom object declared as form fields, inside the given parent"}, "params": [{"type": "HTMLElement", "name": "parent", "description": " Dom object who's children are being searched"}], "description": "This will collect all inputs with inline declarations.", "guessedname": "GETINLINEDECLARATIONS", "guessedtype": "function"}}}}, "version": "1.0.0", "namespaces": ["validator"]}